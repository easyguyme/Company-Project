#!/usr/bin/env php
<?php
use backend\modules\resque\components\RResqueAutoloader;
use backend\modules\resque\components\lib\Resque\Resque_Worker;
use backend\modules\resque\components\lib\Resque\Resque_Redis;
use backend\modules\resque\components\ResqueUtil;
use backend\modules\resque\components\lib\Resque;

defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

// change the following paths if necessary
require(__DIR__ . '/../../../../../vendor/autoload.php');
require(__DIR__ . '/../../../../../vendor/yiisoft/yii2/Yii.php');
require(__DIR__ . '/../../../../../common/config/bootstrap.php');
require(__DIR__ . '/../../../../config/bootstrap.php');

$config = yii\helpers\ArrayHelper::merge(
    require(__DIR__ . '/../../../../config/main.php'),
    require(__DIR__ . '/../../../../config/main-local.php'),
    require(__DIR__ . '/../../../../../common/config/main.php'),
    require(__DIR__ . '/../../../../../common/config/main-local.php')
);

# Init the resque timezone
$timeZone = 'UTC';
if (!empty($config['timeZone'])) {
    $timeZone = $config['timeZone'];
}
date_default_timezone_set($timeZone);

new yii\web\Application($config);
# Turn off our amazing library autoload
spl_autoload_unregister(array('Yii','autoload'));

// Find and initialize Composer
$files = [
    dirname(__FILE__) . '/../RResqueAutoloader.php',
];

foreach ($files as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

RResqueAutoloader::register();

# Give back the power to Yii
spl_autoload_register(array('Yii','autoload'));

$QUEUE = getenv('QUEUE');
if(empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
$REDIS_AUTH = getenv('REDIS_AUTH');

if(!empty($REDIS_BACKEND)) {
    $REDIS_BACKEND_DB = (!empty($REDIS_BACKEND_DB)) ? $REDIS_BACKEND_DB : 0;
    Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB, $REDIS_AUTH);
}

$logLevel = 0;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if(!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = Resque_Worker::LOG_NORMAL;
} else if(!empty($VVERBOSE)) {
    $logLevel = Resque_Worker::LOG_VERBOSE;
}

$APP_INCLUDE = getenv('APP_INCLUDE');
if($APP_INCLUDE) {
    if(!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE ('.$APP_INCLUDE.") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

$logger = null;
// $LOG_HANDLER = getenv('LOGHANDLER');
// $LOG_HANDLER_TARGET = getenv('LOGHANDLERTARGET');

// if (class_exists('MonologInit_MonologInit')) {
//     if (!empty($LOG_HANDLER) && !empty($LOG_HANDLER_TARGET)) {
//         $logger = new MonologInit_MonologInit($LOG_HANDLER, $LOG_HANDLER_TARGET);
//     } else {
//         fwrite(STDOUT, '*** loghandler or logtarget is not set.'."\n");
//     }
// } else {
//     fwrite(STDOUT, '*** MonologInit_MonologInit logger cannot be found, continue without loghandler.'."\n");
// }

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if(!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$count = 1;
$COUNT = getenv('COUNT');
if(!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}

$PREFIX = getenv('PREFIX');
if(!empty($PREFIX)) {
    fwrite(STDOUT, '*** Prefix set to '.$PREFIX."\n");
    Resque_Redis::prefix($PREFIX);
}

$PROGRAM = getenv('PROGRAM');
if($count > 1) {
    for($i = 0; $i < $count; ++$i) {
        $pid = Resque::fork();
        if($pid == -1) {
            die("Could not fork worker ".$i."\n");
        }
        // Child, start the worker
        else if(!$pid) {
            startWorker($QUEUE, $logLevel, $logger, $interval, $PROGRAM);
            break;
        }
    }
}
// Start a single worker
else {
    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
            die('Could not write PID information to ' . $PIDFILE);
    }

    startWorker($QUEUE, $logLevel, $logger, $interval, $PROGRAM);
}

function startWorker($QUEUE, $logLevel, $logger, $interval, $PROGRAM)
{
    $queues = explode(',', $QUEUE);
    $worker = new Resque_Worker($queues, $PROGRAM);

    if (!empty($logger)) {
        $worker->registerLogger($logger);
    } else {
        fwrite(STDOUT, '*** Starting worker '.$worker."\n");
    }

    $worker->logLevel = $logLevel;
    $worker->work($interval);
}
